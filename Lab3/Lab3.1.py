import numpy as np

# Вхідні параметри (варіант 11)
a = 0.082e-6  # коефіцієнт температуропровідності, м^2/с
L = 0.5       # товщина стінки, м
N = 100       # кількість шарів
T = 360000    # тривалість, с (100 годин)
h = 150       # часовий крок, с (зменшений для стабільності)
alpha = 11    # температура зліва, °C
beta = 30     # температура справа, °C

# Обчислення
delta = L / N  # товщина шару, м
mu = a / (delta ** 2)  # коефіцієнт mu
M = int(T / h)  # кількість часових кроків

# Ініціалізація масиву температур (M+1 моментів часу, N+1 точок по y)
u = np.zeros((M+1, N+1))  # u[t, y]
# Встановлюємо граничні умови для всіх моментів часу
u[:, 0] = alpha  # u(t, 0) = 11
u[:, N] = beta   # u(t, L) = 30
# Початкова умова: температура всередині стінки = 0
u[0, 1:N] = 0    # u(0, y) = 0 для внутрішніх точок

# Функція для обчислення похідних (права частина ОДР)
def derivatives(u_t):
    du_dt = np.zeros(N+1)
    # Обчислюємо похідні лише для внутрішніх точок (i від 1 до N-1)
    for i in range(1, N):
        du_dt[i] = mu * (u_t[i+1] - 2 * u_t[i] + u_t[i-1])
    # Граничні точки не змінюються (похідні для них = 0)
    du_dt[0] = 0
    du_dt[N] = 0
    return du_dt

# Метод Рунге-Кутта 4-го порядку
for t in range(M):
    u_t = u[t, :]  # Поточний розв'язок на момент t
    k1 = derivatives(u_t)
    k2 = derivatives(u_t + 0.5 * h * k1)
    k3 = derivatives(u_t + 0.5 * h * k2)
    k4 = derivatives(u_t + h * k3)
    # Оновлюємо значення для всіх точок, але граничні залишаться незмінними
    u[t+1, :] = u_t + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
    # Примусово фіксуємо граничні умови після кожного кроку
    u[t+1, 0] = alpha
    u[t+1, N] = beta

# Виведення результатів
print("Час t = 0 с:")
print(u[0, ::20])  # Температура в точках y на початку
print(f"Час t = {T} с:")
print(u[M, ::20])  # Температура в точках y в кінці